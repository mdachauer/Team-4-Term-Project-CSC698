Index: test3.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import csv\nimport os\nimport sys\nfrom collections import defaultdict\n\nimport pygame\n\n# Initialize Pygame\npygame.init()\n\n# Screen Dimensions\nWIDTH, HEIGHT = 800, 600\nscreen = pygame.display.set_mode((WIDTH, HEIGHT))\npygame.display.set_caption('Friend Finder')\n\n# Colors\nWHITE = (255, 255, 255)\nBLACK = (0, 0, 0)\nGRAY = (200, 200, 200)\nMAGENTA = (255, 0, 255)\nCYAN = (0, 255, 255)\nTURQUOISE = (0, 150, 255)\nBLUE = (0, 0, 255)\nRED = (255, 0, 0)\nYELLOW = (255, 255, 100)\nGREEN = (0, 255, 0)\n\n# Fonts\nquestion_font = pygame.font.Font(None, 36)\nanswer_font_button = pygame.font.Font(None, 36)\nanswer_font_options = pygame.font.Font(None, 30)\nusername_font = pygame.font.Font(None, 36)\n\n#New this may work to split the answer text into lines based on the number of characters.\ndef split_text(text, Font,  max_width):\n    words = text.split(' ')\n    lines = []\n    current_line = \"\"\n    for word in words:\n        test_line = current_line + word + ' '\n        if Font.size(test_line)[0]<= max_width:\n            current_line = test_line\n        else:\n            lines.append(current_line.strip())\n            current_line = word + \" \"\n\n    lines.append(current_line.strip())\n\n    return lines\n\n\n# Sample Questions\nquestions = [\n    \"What age do you prefer to hang out with?\",\n    \"After school, you usually...\",\n    \"You spent most of last summer...\",\n    \"Procrastination is:\",\n    \"Does Pineapple belong on pizza?\",\n    \"You need to improve your:\",\n    \"Public speaking:\",\n    \"What are your plans after graduation? \",\n    \"Would you get a tattoo?\",\n    \"Most of your homework gets done: \",\n]\n\nanswers = [\n    \"A) Doesn't Matter   B) Same age as me   C) Older than Me   D) Younger than me\",\n    \"A) Work             B) Sleep            C) Study           D) Hang out with friends\",\n    \"A) Hanging out at home   B) Traveling    C) At school    D) Working\",\n    \"A) something everyone does B) everyone does it but me   \"\n    \"C)  a quality I'm proud of    D) Gets me in trouble with assignments \",\n    \"A) Yes  B) No\",\n    \"A) grades   B) timing / organization   C) clothes    D) play list\",\n    \"A) Not for me     B) Makes me nauseous    C) I can do it, if in a group   \"\n    \" D) Bring it on - I love to talk \",\n    \"A) college or university   B) trade school    C) military     D) undecided\",\n    \"A) maybe   B) yes my appointment is booked   C) been there done that    D) only temporary ones\",\n    \"A) as soon as I get home   B) sometime after dinner    \"\n    \"C) just before I fall asleep     D) With my friends\",\n]\n\n#Call function to split text\nformatted_answers = [split_text(answer, answer_font_options, WIDTH - 40) for answer in answers]\n# Current question index\ncurrent_question = 0\n\n# User answers\nuser_answers = []\n\n# Load previous answers from file (if any)\nclass_answers = []\n\n\ndef read_answer_file(filename):\n    global class_answers\n    if os.path.exists(filename):\n        with open(filename, 'r', newline='') as csvfile:\n            answer_reader = csv.reader(csvfile)\n            next(answer_reader)  # Skip header\n            for row in answer_reader:\n                class_answers.append(row)\n\n\ndef write_answer_file(filename, name, user_answers, class_answers):\n    class_answers.append([name] + user_answers)\n    with open(filename, 'w', newline='') as csvfile:\n        answer_writer = csv.writer(csvfile)\n        header = ['name'] + [f'Q{i + 1}' for i in range(len(questions))]\n        answer_writer.writerow(header)\n        answer_writer.writerows(class_answers)\n\n\n# Read the answers file (if exists)\nread_answer_file('answers.csv')\n\n\n# Button Class\nclass Button:\n    def __init__(self, text, pos, width, height, color):\n        self.text = text\n        self.pos = pos\n        self.width = width\n        self.height = height\n        self.color = color\n        self.rect = pygame.Rect(pos, (width, height))\n        self.rendered_text = answer_font_button.render(text, True, BLACK)\n\n    def draw(self, screen):\n        pygame.draw.rect(screen, self.color, self.rect)\n        screen.blit(self.rendered_text, self.rendered_text.get_rect(center=self.rect.center))\n\n    def is_clicked(self, event):\n        if event.type == pygame.MOUSEBUTTONDOWN and self.rect.collidepoint(event.pos):\n            return True\n        return False\n\n\n# Create buttons for answers\nbuttons = [\n    Button(\"A\", (150, 300), 100, 50, RED),\n    Button(\"B\", (300, 300), 100, 50, YELLOW),\n    Button(\"C\", (450, 300), 100, 50, GREEN),\n    Button(\"D\", (600, 300), 100, 50, CYAN),\n]\n\n\n# Function to display the current question\n# Do I need to change the reference from answer_text to formatted_answers\ndef display_question(screen, question, answer_lines):\n    screen.fill(BLACK)\n    question_text = question_font.render(question, True, WHITE)\n    screen.blit(question_text, (WIDTH // 2 - question_text.get_width() // 2, 50))\n    y_offset=150\n    for line in answer_lines:\n        answer_text = answer_font_options.render(line, True, WHITE)\n        screen.blit(answer_text, (WIDTH // 2 - answer_text.get_width() // 2, y_offset))\n        y_offset += 30\n    for button in buttons:\n        button.draw(screen)\n    pygame.display.flip()\n\n\n# Function to display the intro page:\ndef display_intro_page(screen, name):\n    screen.fill(BLACK)\n    user_input_text = username_font.render(\"Please enter your name:\", True, WHITE)\n    screen.blit(user_input_text, (WIDTH // 2 - user_input_text.get_width() // 2, HEIGHT // 2 - 50))\n    user_input_box = pygame.Rect(WIDTH // 2 - 100, HEIGHT // 2, 200, 50)\n    pygame.draw.rect(screen, WHITE, user_input_box, 2)\n    name_text = username_font.render(name, True, WHITE)\n    screen.blit(name_text, (user_input_box.x + 10, user_input_box.y + 10))\n    instructions_text = username_font.render(\"Then, click anywhere to start!\", True, WHITE)\n    screen.blit(instructions_text, (WIDTH // 2 - instructions_text.get_width() // 2, HEIGHT // 2 + 100))\n    pygame.display.flip()\n    \n# Function to display the splash page:\ndef display_splash_page(screen):\n    screen.fill(WHITE)\n    splash_image = pygame.image.load('Friend Finder.png')\n    screen.blit(splash_image,(WIDTH // 2 - splash_image.get_width() // 2, HEIGHT // 2 - splash_image.get_height() //2))\n    pygame.display.flip()\n\n# Function to read student answers from CSV\ndef read_student_answers_from_csv(file_path):\n    students = []\n    with open(file_path, 'r') as csvfile:\n        reader = csv.DictReader(csvfile)\n        for row in reader:\n            students.append({\n                \"name\": row[\"name\"],\n                \"answers\": [row[f\"Q{i + 1}\"] for i in range(3)]  # Adjust to match question columns\n            })\n    return students\n\n\ndef calculate_similarity_score(student1, student2):\n    return sum(1 for a, b in zip(student1[\"answers\"], student2[\"answers\"]) if a == b)\n\n\ndef find_top_matches(students, current_student_name, N=5):\n    similarity_scores = defaultdict(dict)\n    for i in range(len(students)):\n        for j in range(i + 1, len(students)):\n            similarity_score = calculate_similarity_score(students[i], students[j])\n            match_percentage = (similarity_score / len(students[i][\"answers\"])) * 100\n            similarity_scores[students[i][\"name\"]][students[j][\"name\"]] = match_percentage\n            similarity_scores[students[j][\"name\"]][students[i][\"name\"]] = match_percentage\n\n    current_student_matches = similarity_scores[current_student_name]\n    sorted_matches = sorted(current_student_matches.items(), key=lambda x: x[1], reverse=True)\n    top_matches = sorted_matches[:N]\n    return top_matches\n\n\ndef display_matches(screen, matches):\n    screen.fill(BLACK)\n    y_offset = 50\n    title = username_font.render(\"Your Top Matches\", True, WHITE)\n    screen.blit(title, (WIDTH // 2 - title.get_width() // 2, 10))\n    for i, (match_name, percentage) in enumerate(matches, start=1):\n        match_text = question_font.render(f\"{i}. {match_name}: {percentage:.2f}% match\", True, WHITE)\n        screen.blit(match_text, (50, y_offset))\n        y_offset += 40\n    thanks = username_font.render('Thanks for playing!', True, WHITE)\n    screen.blit(thanks, (WIDTH // 2 - thanks.get_width() // 2, HEIGHT - match_text.get_width()))\n    pygame.display.flip()\n\n\n# Main loop\nrunning = True\nintro_page = True\nname = \"\"\nsurvey_complete = False\ndisplay_splash_page(screen)\npygame.time.set_timer(pygame.USEREVENT,4000)\nsplash_display = True\nwhile running:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n        if splash_display:\n            if event.type == pygame.USEREVENT:\n                splash_display = False\n                pygame.time.set_timer(pygame.USEREVENT,0)\n\n        elif intro_page:\n            if event.type == pygame.KEYDOWN:\n                if event.key == pygame.K_BACKSPACE:\n                    name = name[:-1]\n                else:\n                    name += event.unicode\n            elif event.type == pygame.MOUSEBUTTONDOWN and name:\n                intro_page = False\n        elif not survey_complete:\n            for button in buttons:\n                if button.is_clicked(event):\n                    user_answers.append(button.text)\n                    current_question += 1\n                    if current_question >= len(questions):\n                        # End of questions\n                        write_answer_file('answers.csv', name, user_answers, class_answers)\n                        students = read_student_answers_from_csv('answers.csv')\n                        matches = find_top_matches(students, name)\n                        survey_complete = True\n                    break\n    if splash_display:\n        display_splash_page(screen)\n    elif intro_page:\n        display_intro_page(screen, name)\n    elif not survey_complete:\n        if current_question < len(questions):\n            display_question(screen, questions[current_question], formatted_answers[current_question])\n    else:\n        display_matches(screen, matches)\n\npygame.quit()\nsys.exit()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test3.py b/test3.py
--- a/test3.py	(revision 1b97e8eec2d8c91b64383d581e16959ec77275bc)
+++ b/test3.py	(date 1722386112265)
@@ -78,6 +78,20 @@
     "A) as soon as I get home   B) sometime after dinner    "
     "C) just before I fall asleep     D) With my friends",
 ]
+#Sprites on questions
+
+pizza = pygame.sprite.Sprite()  #Create the first sprite
+pizza.image = pygame.image.load('Pizza_Friend.png')  #Load the image
+pizza_X = 400  #Set X coordinate
+pizza_Y = 1  #Set Y coordinate
+
+pineapple = pygame.sprite.Sprite()  #Create the first sprite
+pineapple.image = pygame.image.load('Pineapple_Friend.png')  #Load the image
+pineapple_X = 10  #Set X coordinate
+pineapple_Y = 10  #Set Y coordinate
+
+screen.blit(pineapple.image, (pineapple_X, pineapple_Y))  #Draw the first sprite
+screen.blit(pizza.image, (pizza_X, pizza_Y))
 
 #Call function to split text
 formatted_answers = [split_text(answer, answer_font_options, WIDTH - 40) for answer in answers]
Index: answers.csv
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>name,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q8,Q9,Q10\nBill\tB\tC\tD\n\"Sean\n\tC\tB\tA\"\nLisa\tD\tC\tB\nSam\tC\tB\tA\nMike\tA\tB\tC\nKevin\tA\tB\tC\nJoel\tC\tB\tA\nPeter\tA\tB\tD\nJon\tA\tC\tB\nAndy\tB\tC\tD\nMichele\tB\tC\tD\nJose\tA\tC\tD\nElizabeth\tA\tA\tD\nJen\tC\tD\tB\nDaisy\tB\tA\tA\nBlanc\tA\tB\tC\nJack\tC\tB\tA\nJesus,A,A,A,A,A,A,A,A,A,A\nJesus,A,A,A,A,A,A,A,A,A,A\nPaul,B,C,C,C,C,D,D,D,D,D\nPete,B,C,D,D,D,D,D,D,D,D\nMatt,C,B,A,D,D,B,A,A,A,A\nPeter,A,A,A,A,A,A,A,A,A,A\nPete,A,B,A,B,B,D,B,A,C,B\nTotoro,D,D,C,B,A,B,C,D,D,C\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/answers.csv b/answers.csv
--- a/answers.csv	(revision 1b97e8eec2d8c91b64383d581e16959ec77275bc)
+++ b/answers.csv	(date 1722387784269)
@@ -25,3 +25,8 @@
 Peter,A,A,A,A,A,A,A,A,A,A
 Pete,A,B,A,B,B,D,B,A,C,B
 Totoro,D,D,C,B,A,B,C,D,D,C
+Sarah,A,B,C,D,B,A,B,B,B,C
+Mic,A,A,A,A,A,A,A,A,A,A
+Elizabeth,A,B,C,D,C,B,A,B,C,D
+Tan,D,D,C,D,A,D,D,B,A,B
+Joel,A,A,A,A,A,A,A,A,A,A
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"4e1b6bd1-a441-4fac-bba5-920956d19c7c\" name=\"Changes\" comment=\"Adding all questions and answers.\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_16_24,_6_43 PM_[Changes]/shelved.patch\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_16_24__6_43PM__Changes_.xml\" beforeDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/answers.csv\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/answers.csv\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/test3.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/test3.py\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"ExportToHTMLSettings\">\n    <option name=\"printScope\" value=\"1\" />\n    <option name=\"OUTPUT_DIRECTORY\" value=\"$PROJECT_DIR$/exportToHTML\" />\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 2\n}</component>\n  <component name=\"ProjectId\" id=\"2jIfK4jV6egTQd5OAExBLQMtjuG\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;Python.test3.executor&quot;: &quot;Run&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;\n  }\n}</component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-python-sdk-48aec45f0201-746f403e7f0c-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-241.17011.127\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"4e1b6bd1-a441-4fac-bba5-920956d19c7c\" name=\"Changes\" comment=\"change csv file name\" />\n      <created>1721079444646</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1721079444646</updated>\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"Adding all questions and answers.\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1721079510137</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1721079510137</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"2\" />\n    <servers />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"Adding all questions and answers.\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Adding all questions and answers.\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 1b97e8eec2d8c91b64383d581e16959ec77275bc)
+++ b/.idea/workspace.xml	(date 1722385804040)
@@ -5,8 +5,8 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="4e1b6bd1-a441-4fac-bba5-920956d19c7c" name="Changes" comment="Adding all questions and answers.">
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_16_24,_6_43 PM_[Changes]/shelved.patch" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_7_16_24__6_43PM__Changes_.xml" beforeDir="false" />
+      <change afterPath="$PROJECT_DIR$/pineapple_friend.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/pizza_friend.png" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/answers.csv" beforeDir="false" afterPath="$PROJECT_DIR$/answers.csv" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/test3.py" beforeDir="false" afterPath="$PROJECT_DIR$/test3.py" afterDir="false" />
