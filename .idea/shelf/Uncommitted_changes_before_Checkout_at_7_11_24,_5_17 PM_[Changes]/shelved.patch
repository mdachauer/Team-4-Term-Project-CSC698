Index: Main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>### Melanie's additions- setting up pygame to collect answers #############################################################\nimport pygame\nimport sys\nimport csv\nimport os\nimport random\n\n# Initialize Pygame\npygame.init()\n\n# Screen Dimensions\nWIDTH, HEIGHT = 800, 600\nscreen = pygame.display.set_mode((WIDTH, HEIGHT))\npygame.display.set_caption('Friend Finder')\n\n# Colors\nWHITE = (255, 255, 255)\nBLACK = (0, 0, 0)\nGRAY = (200, 200, 200)\nMAGENTA = (255, 0, 255)\nCYAN = (0, 255, 255)\nTURQUOISE = (0, 150, 255)\nBLUE = (0, 0, 255)\nRED = (255, 0, 0)\nYELLOW = (255, 255, 100)\nGREEN = (0, 255, 0)\n\n\n# Fonts\nquestion_font = pygame.font.Font(None, 36)\nanswer_font_button = pygame.font.Font(None, 36)\nanswer_font_options = pygame.font.Font(None, 30)\nusername_font = pygame.font.Font(None, 36)\n\n# Sample Questions\nquestions = [\n    \"What age do you prefer to hang out with?\",\n    \"After school, you usually...\",\n    \"You spent most of last summer...\",\n]\n\nanswers = [\n    \"A) Doesn't Matter   B) Same age as me   C) Older than Me   D) Younger than me\",\n    \"A) Work             B) Sleep            C) Study           D) Hang out with friends\",\n    \"A)Hanging out at home   B) Traveling    C) At school    D) Working\",\n]\n# Current question index\ncurrent_question = 0\n\n# User answers\nuser_answers = []\n\n# Load previous answers from file (if any)\nclass_answers = []\n\ndef read_answer_file(filename):\n    global class_answers\n    if os.path.exists(filename):\n        with open(filename, 'r', newline='') as csvfile:\n            answer_reader = csv.reader(csvfile)\n            next(answer_reader)  # Skip header\n            for row in answer_reader:\n                class_answers.append(row)\n\ndef write_answer_file(filename, name, user_answers, class_answers):\n    class_answers.append([name] + user_answers)\n    with open(filename, 'w', newline='') as csvfile:\n        answer_writer = csv.writer(csvfile)\n        header = ['name'] + [f'Q{i+1}' for i in range(len(questions))]\n        answer_writer.writerow(header)\n        answer_writer.writerows(class_answers)\n\n# Read the answers file (if exists)\nread_answer_file('answers.csv')\n\n# Button Class\nclass Button:\n    def __init__(self, text, pos, width, height, color):\n        self.text = text\n        self.pos = pos\n        self.width = width\n        self.height = height\n        self.color = color\n        self.rect = pygame.Rect(pos, (width, height))\n        self.rendered_text = answer_font_button.render(text, True, BLACK)\n\n    def draw(self, screen):\n        pygame.draw.rect(screen, self.color, self.rect)\n        screen.blit(self.rendered_text, self.rendered_text.get_rect(center=self.rect.center))\n\n    def is_clicked(self, event):\n        if event.type == pygame.MOUSEBUTTONDOWN and self.rect.collidepoint(event.pos):\n            return True\n        return False\n\n# Create buttons for answers\nbuttons = [\n    Button(\"A\", (150, 300), 100, 50, RED),\n    Button(\"B\", (300, 300), 100, 50, YELLOW),\n    Button(\"C\", (450, 300), 100, 50, GREEN),\n    Button(\"D\", (600, 300), 100, 50, CYAN),\n]\n\n# Function to display the current question\ndef display_question(screen, question, answer):\n    screen.fill(BLACK)\n    question_text = question_font.render(question, True, WHITE)\n    answer_text = answer_font_options.render(answer, True, WHITE)\n    screen.blit(question_text, (WIDTH // 2 - question_text.get_width() // 2, 150))\n    screen.blit(answer_text, (WIDTH // 2 - answer_text.get_width() // 2, 200))\n    for button in buttons:\n        button.draw(screen)\n    pygame.display.flip()\n    \n# Function to display the intro page:\ndef display_intro_page(screen, name):\n    screen.fill(BLACK)\n    user_input_text = username_font.render(\"Please enter your name:\", True, WHITE)\n    screen.blit(user_input_text, (WIDTH // 2 - user_input_text.get_width() // 2, HEIGHT // 2 -50))\n    user_input_box = pygame.Rect(WIDTH // 2 - 100, HEIGHT // 2, 200, 50)\n    pygame.draw.rect(screen, WHITE, user_input_box, 2)\n    name_text = username_font.render(name, True, WHITE)\n    screen.blit(name_text, (user_input_box.x +10, user_input_box.y +10))\n    instructions_text = username_font.render(\"Then, click anywhere to start!\", True, WHITE)\n    screen.blit(instructions_text, (WIDTH // 2 - instructions_text.get_width() // 2, HEIGHT // 2 +100))\n    pygame.display.flip()\n\n# Main loop\nrunning = True\nintro_page = True\nname = \"\"\nwhile running:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n        if intro_page ==True:\n            if event.type == pygame.KEYDOWN:\n                if event.key == pygame.K_BACKSPACE:\n                    name = name[:-1]\n                else:\n                    name += event.unicode\n            elif event.type == pygame.MOUSEBUTTONDOWN and name:\n                intro_page = False\n        else:\n            for button in buttons:\n                if button.is_clicked(event):\n                    user_answers.append(button.text)\n                    current_question += 1\n                    if current_question >= len(questions):\n                        # End of questions\n                        name = name  \n                        write_answer_file('answers.csv', name, user_answers, class_answers)\n                        running = False\n                    break\n    \n    if intro_page == True:\n        display_intro_page(screen, name)\n    else:\n        if current_question < len(questions):\n            display_question(screen, questions[current_question], answers[current_question])\n\n\npygame.quit()\nsys.exit()\n\n##### End Melanie's additions ########################################################################################\n\nimport csv\nfrom collections import defaultdict\n\n\ndef read_student_answers_from_csv(file_path):\n    students = []\n    with open(file_path, 'r') as csvfile:\n        reader = csv.DictReader(csvfile)\n        for row in reader:\n            students.append({\n                \"name\": row[\"Name\"],\n                \"answers\": row[\"Answers\"].split(\",\")  # Assuming answers are comma-separated\n            })\n    return students\n\n\ncsv_file_path = \"student_answers.csv\"  # change to CSV file name or just use this name\nstudents = read_student_answers_from_csv(csv_file_path)\n\n\ndef calculate_similarity_score(student1, student2):\n    return sum([1 for a, b in zip(student1[\"answers\"], student2[\"answers\"]) if a == b])\n\n\n#Find matches\ndef find_top_matches(students, N=5):\n    similarity_scores = defaultdict(dict)\n    for i in range(len(students)):\n        for j in range(i + 1, len(students)):\n            similarity_score = calculate_similarity_score(students[i], students[j])\n            similarity_scores[students[i][\"name\"]][students[j][\"name\"]] = similarity_score\n            similarity_scores[students[j][\"name\"]][students[i][\"name\"]] = similarity_score\n\n    top_matches = {}\n    for student in students:\n        sorted_matches = sorted(similarity_scores[student[\"name\"]].items(), key=lambda x: x[1], reverse=True)\n        top_matches[student[\"name\"]] = [match[0] for match in sorted_matches[:N]]\n\n    return top_matches\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Main.py b/Main.py
--- a/Main.py	
+++ b/Main.py	
@@ -1,9 +1,9 @@
 ### Melanie's additions- setting up pygame to collect answers #############################################################
-import pygame
-import sys
 import csv
 import os
-import random
+import sys
+
+import pygame
 
 # Initialize Pygame
 pygame.init()
@@ -25,7 +25,6 @@
 YELLOW = (255, 255, 100)
 GREEN = (0, 255, 0)
 
-
 # Fonts
 question_font = pygame.font.Font(None, 36)
 answer_font_button = pygame.font.Font(None, 36)
@@ -53,6 +52,7 @@
 # Load previous answers from file (if any)
 class_answers = []
 
+
 def read_answer_file(filename):
     global class_answers
     if os.path.exists(filename):
@@ -62,17 +62,20 @@
             for row in answer_reader:
                 class_answers.append(row)
 
+
 def write_answer_file(filename, name, user_answers, class_answers):
     class_answers.append([name] + user_answers)
     with open(filename, 'w', newline='') as csvfile:
         answer_writer = csv.writer(csvfile)
-        header = ['name'] + [f'Q{i+1}' for i in range(len(questions))]
+        header = ['name'] + [f'Q{i + 1}' for i in range(len(questions))]
         answer_writer.writerow(header)
         answer_writer.writerows(class_answers)
 
+
 # Read the answers file (if exists)
 read_answer_file('answers.csv')
 
+
 # Button Class
 class Button:
     def __init__(self, text, pos, width, height, color):
@@ -93,6 +96,7 @@
             return True
         return False
 
+
 # Create buttons for answers
 buttons = [
     Button("A", (150, 300), 100, 50, RED),
@@ -101,6 +105,7 @@
     Button("D", (600, 300), 100, 50, CYAN),
 ]
 
+
 # Function to display the current question
 def display_question(screen, question, answer):
     screen.fill(BLACK)
@@ -111,20 +116,22 @@
     for button in buttons:
         button.draw(screen)
     pygame.display.flip()
-    
+
+
 # Function to display the intro page:
 def display_intro_page(screen, name):
     screen.fill(BLACK)
     user_input_text = username_font.render("Please enter your name:", True, WHITE)
-    screen.blit(user_input_text, (WIDTH // 2 - user_input_text.get_width() // 2, HEIGHT // 2 -50))
+    screen.blit(user_input_text, (WIDTH // 2 - user_input_text.get_width() // 2, HEIGHT // 2 - 50))
     user_input_box = pygame.Rect(WIDTH // 2 - 100, HEIGHT // 2, 200, 50)
     pygame.draw.rect(screen, WHITE, user_input_box, 2)
     name_text = username_font.render(name, True, WHITE)
-    screen.blit(name_text, (user_input_box.x +10, user_input_box.y +10))
+    screen.blit(name_text, (user_input_box.x + 10, user_input_box.y + 10))
     instructions_text = username_font.render("Then, click anywhere to start!", True, WHITE)
-    screen.blit(instructions_text, (WIDTH // 2 - instructions_text.get_width() // 2, HEIGHT // 2 +100))
+    screen.blit(instructions_text, (WIDTH // 2 - instructions_text.get_width() // 2, HEIGHT // 2 + 100))
     pygame.display.flip()
 
+
 # Main loop
 running = True
 intro_page = True
@@ -133,7 +140,7 @@
     for event in pygame.event.get():
         if event.type == pygame.QUIT:
             running = False
-        if intro_page ==True:
+        if intro_page == True:
             if event.type == pygame.KEYDOWN:
                 if event.key == pygame.K_BACKSPACE:
                     name = name[:-1]
@@ -148,25 +155,25 @@
                     current_question += 1
                     if current_question >= len(questions):
                         # End of questions
-                        name = name  
+                        name = name
                         write_answer_file('answers.csv', name, user_answers, class_answers)
                         running = False
                     break
-    
+
     if intro_page == True:
         display_intro_page(screen, name)
     else:
         if current_question < len(questions):
             display_question(screen, questions[current_question], answers[current_question])
 
-
 pygame.quit()
 sys.exit()
 
+
 ##### End Melanie's additions ########################################################################################
 
-import csv
-from collections import defaultdict
+#Move to top import csv
+# Move to top from collections import defaultdict
 
 
 def read_student_answers_from_csv(file_path):
@@ -175,27 +182,26 @@
         reader = csv.DictReader(csvfile)
         for row in reader:
             students.append({
-                "name": row["Name"],
-                "answers": row["Answers"].split(",")  # Assuming answers are comma-separated
+                "name": row["name"],
+                #"answers": row["Answers"].split(",")  # Assuming answers are comma-separated
             })
     return students
 
 
-csv_file_path = "student_answers.csv"  # change to CSV file name or just use this name
+csv_file_path = "answers.csv"  # change to CSV file name or just use this name
 students = read_student_answers_from_csv(csv_file_path)
 
-
-def calculate_similarity_score(student1, student2):
-    return sum([1 for a, b in zip(student1["answers"], student2["answers"]) if a == b])
-
+#def calculate_similarity_score(student1, student2):
+#    return sum([1 for a, b in zip(student1["answers"], student2["answers"]) if a == b])""
+# Sample for replace answers "Q1", "Q2",
 
 #Find matches
 def find_top_matches(students, N=5):
-    similarity_scores = defaultdict(dict)
+    similarity_scores = default-dict(dict)
     for i in range(len(students)):
         for j in range(i + 1, len(students)):
             similarity_score = calculate_similarity_score(students[i], students[j])
-            similarity_scores[students[i]["name"]][students[j]["name"]] = similarity_score
+           similarity_scores[students[i]["name"]][students[j]["name"]] = similarity_score
             similarity_scores[students[j]["name"]][students[i]["name"]] = similarity_score
 
     top_matches = {}
@@ -204,3 +210,14 @@
         top_matches[student["name"]] = [match[0] for match in sorted_matches[:N]]
 
     return top_matches
+
+# Load student answers from CSV (assuming you have a CSV file with student names and answers)
+csv_file_path = "answers.csv"  # Change to your actual CSV file path
+students = read_student_answers_from_csv(csv_file_path)
+
+# Calculate similarity scores and find top matches
+top_matches = find_top_matches(students, N=5)
+
+# Display top matches for each student
+for student_name, matches in top_matches.items():
+    print(f'{student_name} matches: {matches}')
