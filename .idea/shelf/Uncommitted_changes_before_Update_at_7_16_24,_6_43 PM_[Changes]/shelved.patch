Index: test3.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame\nimport sys\nimport csv\nimport os\nimport random\nfrom collections import defaultdict\n\n# Initialize Pygame\npygame.init()\n\n# Screen Dimensions\nWIDTH, HEIGHT = 800, 600\nscreen = pygame.display.set_mode((WIDTH, HEIGHT))\npygame.display.set_caption('Friend Finder')\n\n# Colors\nWHITE = (255, 255, 255)\nBLACK = (0, 0, 0)\nGRAY = (200, 200, 200)\nMAGENTA = (255, 0, 255)\nCYAN = (0, 255, 255)\nTURQUOISE = (0, 150, 255)\nBLUE = (0, 0, 255)\nRED = (255, 0, 0)\nYELLOW = (255, 255, 100)\nGREEN = (0, 255, 0)\n\n# Fonts\nquestion_font = pygame.font.Font(None, 36)\nanswer_font_button = pygame.font.Font(None, 36)\nanswer_font_options = pygame.font.Font(None, 30)\nusername_font = pygame.font.Font(None, 36)\n\n# Sample Questions\nquestions = [\n    \"What age do you prefer to hang out with?\",\n    \"After school, you usually...\",\n    \"You spent most of last summer...\",\n    \"Procrastination is:\",\n    \"Does Pineapple belong on pizza?\",\n    \"You need to improve your:\",\n    \"Public speaking:\",\n    \"What are your plans after graduation? \",\n    \"Would you get a tattoo?\",\n    \"Most of your homework gets done: \",\n]\n\nanswers = [\n    \"A) Doesn't Matter   B) Same age as me   C) Older than Me   D) Younger than me\",\n    \"A) Work             B) Sleep            C) Study           D) Hang out with friends\",\n    \"A) Hanging out at home   B) Traveling    C) At school    D) Working\",\n    \"A) something everyone does B) everyone does it but me   \"\n    \"C)  a quality I'm proud of    D) Gets me in trouble with assignments \",\n    \"A) Yes  B) No\",\n    \"A) grades   B) timing / organization   C) clothes    D) play list\",\n    \"A) Not for me     B) Makes me nauseous    C) I can do it, if in a group   \"\n    \" D) Bring it on - I love to talk \",\n    \"A) college or university   B) trade school    C) military     D) undecided\",\n    \"A) maybe   B) yes my appointment is booked   C) been there done that    D) only temporary ones\",\n    \"A) as soon as I get home   B) sometime after dinner    \"\n    \"C) just before I fall asleep     D) With my friends\",\n]\n\n# Current question index\ncurrent_question = 0\n\n# User answers\nuser_answers = []\n\n# Load previous answers from file (if any)\nclass_answers = []\n\n\ndef read_answer_file(filename):\n    global class_answers\n    if os.path.exists(filename):\n        with open(filename, 'r', newline='') as csvfile:\n            answer_reader = csv.reader(csvfile)\n            next(answer_reader)  # Skip header\n            for row in answer_reader:\n                class_answers.append(row)\n\n\ndef write_answer_file(filename, name, user_answers, class_answers):\n    class_answers.append([name] + user_answers)\n    with open(filename, 'w', newline='') as csvfile:\n        answer_writer = csv.writer(csvfile)\n        header = ['name'] + [f'Q{i + 1}' for i in range(len(questions))]\n        answer_writer.writerow(header)\n        answer_writer.writerows(class_answers)\n\n\n# Read the answers file (if exists)\nread_answer_file('answers.csv')\n\n\n# Button Class\nclass Button:\n    def __init__(self, text, pos, width, height, color):\n        self.text = text\n        self.pos = pos\n        self.width = width\n        self.height = height\n        self.color = color\n        self.rect = pygame.Rect(pos, (width, height))\n        self.rendered_text = answer_font_button.render(text, True, BLACK)\n\n    def draw(self, screen):\n        pygame.draw.rect(screen, self.color, self.rect)\n        screen.blit(self.rendered_text, self.rendered_text.get_rect(center=self.rect.center))\n\n    def is_clicked(self, event):\n        if event.type == pygame.MOUSEBUTTONDOWN and self.rect.collidepoint(event.pos):\n            return True\n        return False\n\n\n# Create buttons for answers\nbuttons = [\n    Button(\"A\", (150, 300), 100, 50, RED),\n    Button(\"B\", (300, 300), 100, 50, YELLOW),\n    Button(\"C\", (450, 300), 100, 50, GREEN),\n    Button(\"D\", (600, 300), 100, 50, CYAN),\n]\n\n\n# Function to display the current question\ndef display_question(screen, question, answer):\n    screen.fill(BLACK)\n    question_text = question_font.render(question, True, WHITE)\n    answer_text = answer_font_options.render(answer, True, WHITE)\n    screen.blit(question_text, (WIDTH // 2 - question_text.get_width() // 2, 150))\n    screen.blit(answer_text, (WIDTH // 2 - answer_text.get_width() // 2, 200))\n    for button in buttons:\n        button.draw(screen)\n    pygame.display.flip()\n\n\n# Function to display the intro page:\ndef display_intro_page(screen, name):\n    screen.fill(BLACK)\n    user_input_text = username_font.render(\"Please enter your name:\", True, WHITE)\n    screen.blit(user_input_text, (WIDTH // 2 - user_input_text.get_width() // 2, HEIGHT // 2 - 50))\n    user_input_box = pygame.Rect(WIDTH // 2 - 100, HEIGHT // 2, 200, 50)\n    pygame.draw.rect(screen, WHITE, user_input_box, 2)\n    name_text = username_font.render(name, True, WHITE)\n    screen.blit(name_text, (user_input_box.x + 10, user_input_box.y + 10))\n    instructions_text = username_font.render(\"Then, click anywhere to start!\", True, WHITE)\n    screen.blit(instructions_text, (WIDTH // 2 - instructions_text.get_width() // 2, HEIGHT // 2 + 100))\n    pygame.display.flip()\n\n\n# Function to read student answers from CSV\ndef read_student_answers_from_csv(file_path):\n    students = []\n    with open(file_path, 'r') as csvfile:\n        reader = csv.DictReader(csvfile)\n        for row in reader:\n            students.append({\n                \"name\": row[\"name\"],\n                \"answers\": [row[f\"Q{i + 1}\"] for i in range(3)]  # Adjust to match question columns\n            })\n    return students\n\n\ndef calculate_similarity_score(student1, student2):\n    return sum(1 for a, b in zip(student1[\"answers\"], student2[\"answers\"]) if a == b)\n\n\ndef find_top_matches(students, current_student_name, N=5):\n    similarity_scores = defaultdict(dict)\n    for i in range(len(students)):\n        for j in range(i + 1, len(students)):\n            similarity_score = calculate_similarity_score(students[i], students[j])\n            match_percentage = (similarity_score / len(students[i][\"answers\"])) * 100\n            similarity_scores[students[i][\"name\"]][students[j][\"name\"]] = match_percentage\n            similarity_scores[students[j][\"name\"]][students[i][\"name\"]] = match_percentage\n\n    current_student_matches = similarity_scores[current_student_name]\n    sorted_matches = sorted(current_student_matches.items(), key=lambda x: x[1], reverse=True)\n    top_matches = sorted_matches[:N]\n    return top_matches\n\n\ndef display_matches(screen, matches):\n    screen.fill(BLACK)\n    y_offset = 50\n    title = username_font.render(\"Your Top Matches\", True, WHITE)\n    screen.blit(title, (WIDTH // 2 - title.get_width() // 2, 10))\n    for i, (match_name, percentage) in enumerate(matches, start=1):\n        match_text = question_font.render(f\"{i}. {match_name}: {percentage:.2f}% match\", True, WHITE)\n        screen.blit(match_text, (50, y_offset))\n        y_offset += 40\n    pygame.display.flip()\n\n\n# Main loop\nrunning = True\nintro_page = True\nname = \"\"\nsurvey_complete = False\nwhile running:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n        if intro_page:\n            if event.type == pygame.KEYDOWN:\n                if event.key == pygame.K_BACKSPACE:\n                    name = name[:-1]\n                else:\n                    name += event.unicode\n            elif event.type == pygame.MOUSEBUTTONDOWN and name:\n                intro_page = False\n        elif not survey_complete:\n            for button in buttons:\n                if button.is_clicked(event):\n                    user_answers.append(button.text)\n                    current_question += 1\n                    if current_question >= len(questions):\n                        # End of questions\n                        write_answer_file('answers.csv', name, user_answers, class_answers)\n                        students = read_student_answers_from_csv('answers.csv')\n                        matches = find_top_matches(students, name)\n                        survey_complete = True\n                    break\n\n    if intro_page:\n        display_intro_page(screen, name)\n    elif not survey_complete:\n        if current_question < len(questions):\n            display_question(screen, questions[current_question], answers[current_question])\n    else:\n        display_matches(screen, matches)\n\npygame.quit()\nsys.exit()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test3.py b/test3.py
--- a/test3.py	(revision 561c80ecefacd6d9930fbea2ad10d7b9967e7659)
+++ b/test3.py	(date 1721180626189)
@@ -1,10 +1,10 @@
-import pygame
-import sys
 import csv
 import os
-import random
+import sys
 from collections import defaultdict
 
+import pygame
+
 # Initialize Pygame
 pygame.init()
 
@@ -31,6 +31,24 @@
 answer_font_options = pygame.font.Font(None, 30)
 username_font = pygame.font.Font(None, 36)
 
+#New this may work to split the answer text into lines based on the number of characters.
+def split_text(text, max_length=25):
+    words = text.split()
+    lines = []
+    current_line = ""
+    for word in words:
+        if len(current_line) + len(word) + 1 <= max_length:
+            current_line += word + " "
+        else:
+            lines.append(current_line.strip())
+            current_line = word + " "
+
+    if current_line:
+        lines.append(current_line.strip())
+
+    return "\n".join(lines)
+
+
 # Sample Questions
 questions = [
     "What age do you prefer to hang out with?",
@@ -61,6 +79,8 @@
     "C) just before I fall asleep     D) With my friends",
 ]
 
+#Call function to split text
+formatted_answers = [split_text(answer) for answer in answers]
 # Current question index
 current_question = 0
 
@@ -125,10 +145,10 @@
 
 
 # Function to display the current question
+# Do I need to change the reference from answer_text to formatted_answers
 def display_question(screen, question, answer):
     screen.fill(BLACK)
     question_text = question_font.render(question, True, WHITE)
-    answer_text = answer_font_options.render(answer, True, WHITE)
     screen.blit(question_text, (WIDTH // 2 - question_text.get_width() // 2, 150))
     screen.blit(answer_text, (WIDTH // 2 - answer_text.get_width() // 2, 200))
     for button in buttons:
@@ -233,4 +253,4 @@
         display_matches(screen, matches)
 
 pygame.quit()
-sys.exit()
+sys.exit()
\ No newline at end of file
Index: answers.csv
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/answers.csv b/answers.csv
new file mode 100644
--- /dev/null	(date 1721180487381)
+++ b/answers.csv	(date 1721180487381)
@@ -0,0 +1,21 @@
+name,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q8,Q9,Q10
+Bill	B	C	D
+"Sean
+	C	B	A"
+Lisa	D	C	B
+Sam	C	B	A
+Mike	A	B	C
+Kevin	A	B	C
+Joel	C	B	A
+Peter	A	B	D
+Jon	A	C	B
+Andy	B	C	D
+Michele	B	C	D
+Jose	A	C	D
+Elizabeth	A	A	D
+Jen	C	D	B
+Daisy	B	A	A
+Blanc	A	B	C
+Jack	C	B	A
+Jesus,A,A,A,A,A,A,A,A,A,A
+Jesus,A,A,A,A,A,A,A,A,A,A
Index: .idea/inspectionProfiles/profiles_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/profiles_settings.xml b/.idea/inspectionProfiles/profiles_settings.xml
new file mode 100644
--- /dev/null	(date 1721179328404)
+++ b/.idea/inspectionProfiles/profiles_settings.xml	(date 1721179328404)
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <settings>
+    <option name="USE_PROJECT_PROFILE" value="false" />
+    <version value="1.0" />
+  </settings>
+</component>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1721179328403)
+++ b/.idea/vcs.xml	(date 1721179328403)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
